=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.81 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.81.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0
=end

require 'spec_helper'
require 'json'

# Unit tests for Athenian::FilterApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'FilterApi' do
  before do
    # run before each test
    @api_instance = Athenian::FilterApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of FilterApi' do
    it 'should create an instance of FilterApi' do
      expect(@api_instance).to be_instance_of(Athenian::FilterApi)
    end
  end

  # unit tests for diff_releases
  # Find releases between the two given ones per repository.
  # @param [Hash] opts the optional parameters
  # @option opts [DiffReleasesRequest] :body 
  # @return [DiffedReleases]
  describe 'diff_releases test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_code_checks
  # Find code check runs that match the specified query. [What a code check run is exactly.](https://docs.github.com/en/rest/guides/getting-started-with-the-checks-api#about-check-runs)
  # @param [Hash] opts the optional parameters
  # @option opts [FilterCodeChecksRequest] :body 
  # @return [FilteredCodeCheckRuns]
  describe 'filter_code_checks test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_commits
  # Find commits that match the specified query.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterCommitsRequest] :body 
  # @return [CommitsList]
  describe 'filter_commits test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_contributors
  # Find developers that made an action within the given timeframe.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterContributorsRequest] :body 
  # @return [Array<DeveloperSummary>]
  describe 'filter_contributors test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_deployments
  # List the deployments that satisfy the provided filters. We accept new deployment notifications at &#x60;/events/deployments&#x60;.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterDeploymentsRequest] :body 
  # @return [FilteredDeployments]
  describe 'filter_deployments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_environments
  # List the deployment environments.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterEnvironmentsRequest] :body 
  # @return [Array<FilteredEnvironment>]
  describe 'filter_environments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_jira_stuff
  # Find various JIRA entities relevant to the specified date interval.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterJIRAStuff] :body 
  # @return [FilteredJIRAStuff]
  describe 'filter_jira_stuff test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_labels
  # Find labels used in the given repositories.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterLabelsRequest] :body 
  # @return [Array<FilteredLabel>]
  describe 'filter_labels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_prs
  # List pull requests that satisfy the query.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterPullRequestsRequest] :filter_pull_requests_request 
  # @return [PullRequestSet]
  describe 'filter_prs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_releases
  # Find releases that were published in the given time fram in the given repositories.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterReleasesRequest] :body 
  # @return [ReleaseSet]
  describe 'filter_releases test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for filter_repositories
  # Find repositories that were updated within the given timeframe.
  # @param [Hash] opts the optional parameters
  # @option opts [FilterRepositoriesRequest] :body 
  # @return [Array<String>]
  describe 'filter_repositories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
