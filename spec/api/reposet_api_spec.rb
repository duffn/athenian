=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.81 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.81.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0
=end

require 'spec_helper'
require 'json'

# Unit tests for Athenian::ReposetApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ReposetApi' do
  before do
    # run before each test
    @api_instance = Athenian::ReposetApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReposetApi' do
    it 'should create an instance of ReposetApi' do
      expect(@api_instance).to be_instance_of(Athenian::ReposetApi)
    end
  end

  # unit tests for create_reposet
  # 🛡️👤 Create a repository set.
  # @param [Hash] opts the optional parameters
  # @option opts [RepositorySetCreateRequest] :body 
  # @return [CreatedIdentifier]
  describe 'create_reposet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_reposet
  # 🛡️👤 Delete a repository set. The user must be an admin of the account that owns the reposet.
  # @param id Numeric identifier of the repository set to delete.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'delete_reposet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_reposet
  # List a repository set. The user must be in the account that owns the reposet.
  # @param id Numeric identifier of the repository set to list.
  # @param [Hash] opts the optional parameters
  # @return [RepositorySetWithName]
  describe 'get_reposet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_reposets
  # List the repository sets belonging to the calling user.
  # @param id Numeric identifier of the account.
  # @param [Hash] opts the optional parameters
  # @return [Array<RepositorySetListItem>]
  describe 'list_reposets test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_reposet
  # 🛡️👤 Update a repository set. The user must be an admin of the account that owns the reposet.
  # @param id Numeric identifier of the repository set to update.
  # @param [Hash] opts the optional parameters
  # @option opts [RepositorySetWithName] :body 
  # @return [Object]
  describe 'update_reposet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
