=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.81 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.81.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0
=end

require 'spec_helper'
require 'json'

# Unit tests for Athenian::SettingsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SettingsApi' do
  before do
    # run before each test
    @api_instance = Athenian::SettingsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SettingsApi' do
    it 'should create an instance of SettingsApi' do
      expect(@api_instance).to be_instance_of(Athenian::SettingsApi)
    end
  end

  # unit tests for delete_logical_repository
  # üõ°Ô∏è Delete a logical repository.
  # @param [Hash] opts the optional parameters
  # @option opts [LogicalRepositoryGetRequest] :body 
  # @return [Object]
  describe 'delete_logical_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_work_type
  # üë§ Remove the work type given the name.
  # @param [Hash] opts the optional parameters
  # @option opts [WorkTypeGetRequest] :body 
  # @return [Object]
  describe 'delete_work_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_jira_identities
  # Fetch the GitHub&lt;&gt;JIRA user identity mapping.
  # @param id Numeric identifier of the account.
  # @param [Hash] opts the optional parameters
  # @return [Array<MappedJIRAIdentity>]
  describe 'get_jira_identities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_jira_projects
  # List the currently enabled JIRA project settings.
  # @param id Numeric identifier of the account.
  # @param [Hash] opts the optional parameters
  # @return [Array<JIRAProject>]
  describe 'get_jira_projects test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_work_type
  # Fetch the definition of the work type given the name.
  # @param [Hash] opts the optional parameters
  # @option opts [WorkTypeGetRequest] :body 
  # @return [WorkType]
  describe 'get_work_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_logical_repositories
  # List the currently configured logical repositories. A logical repository is a set of rules to match PRs, releases, and deployments that has a name and pretends to be a regular GitHub repository everywhere in UI and API requests. This feature is particularly useful to reap monorepos into separate, joint or disjoint parts. 
  # @param id Numeric identifier of the account.
  # @param [Hash] opts the optional parameters
  # @return [Array<LogicalRepository>]
  describe 'list_logical_repositories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_release_match_settings
  # List the current release matching settings. Release settings are rules by which to mark releases in GitHub repositories. 
  # @param id Numeric identifier of the account.
  # @param [Hash] opts the optional parameters
  # @return [Hash<String, ReleaseMatchSetting>]
  describe 'list_release_match_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_work_types
  # List the current work types - rule sets to group PRs, releases, etc. together.
  # @param id Numeric identifier of the account.
  # @param [Hash] opts the optional parameters
  # @return [Array<WorkType>]
  describe 'list_work_types test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_jira_identities
  # üë§ Add, remove or override GitHub&lt;&gt;JIRA user identity mapping.
  # @param [Hash] opts the optional parameters
  # @option opts [SetMappedJIRAIdentitiesRequest] :body 
  # @return [Array<MappedJIRAIdentity>]
  describe 'set_jira_identities test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_jira_projects
  # üõ°Ô∏èüë§ Set the enabled JIRA projects.
  # @param [Hash] opts the optional parameters
  # @option opts [JIRAProjectsRequest] :body 
  # @return [Array<JIRAProject>]
  describe 'set_jira_projects test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_logical_repository
  # üõ°Ô∏èüë§ Insert or update a logical repository - a named set of rules to match PRs, releases, and deployments that pretends to be a regular GitHub repository everywhere in UI and API requests. 
  # @param [Hash] opts the optional parameters
  # @option opts [LogicalRepositoryRequest] :body 
  # @return [LogicalRepository]
  describe 'set_logical_repository test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_release_match
  # üë§ Set the release matching rule for a list of repositories. Only for account admins. Release settings are rules by which to mark releases in GitHub repositories. 
  # @param [Hash] opts the optional parameters
  # @option opts [ReleaseMatchRequest] :body 
  # @return [Array<String>]
  describe 'set_release_match test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_work_type
  # üë§ Create or update a work type - a rule set to group PRs, releases, etc. together.
  # @param [Hash] opts the optional parameters
  # @option opts [WorkTypePutRequest] :body 
  # @return [WorkType]
  describe 'set_work_type test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
