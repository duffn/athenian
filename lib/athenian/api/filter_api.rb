=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.81 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.81.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0
=end

require 'cgi'

module Athenian
  class FilterApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Find releases between the two given ones per repository.
    # @param [Hash] opts the optional parameters
    # @option opts [DiffReleasesRequest] :body 
    # @return [DiffedReleases]
    def diff_releases(opts = {})
      data, _status_code, _headers = diff_releases_with_http_info(opts)
      data
    end

    # Find releases between the two given ones per repository.
    # @param [Hash] opts the optional parameters
    # @option opts [DiffReleasesRequest] :body 
    # @return [Array<(DiffedReleases, Integer, Hash)>] DiffedReleases data, response status code and response headers
    def diff_releases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.diff_releases ...'
      end
      # resource path
      local_var_path = '/diff/releases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DiffedReleases'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.diff_releases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#diff_releases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find code check runs that match the specified query. [What a code check run is exactly.](https://docs.github.com/en/rest/guides/getting-started-with-the-checks-api#about-check-runs)
    # @param [Hash] opts the optional parameters
    # @option opts [FilterCodeChecksRequest] :body 
    # @return [FilteredCodeCheckRuns]
    def filter_code_checks(opts = {})
      data, _status_code, _headers = filter_code_checks_with_http_info(opts)
      data
    end

    # Find code check runs that match the specified query. [What a code check run is exactly.](https://docs.github.com/en/rest/guides/getting-started-with-the-checks-api#about-check-runs)
    # @param [Hash] opts the optional parameters
    # @option opts [FilterCodeChecksRequest] :body 
    # @return [Array<(FilteredCodeCheckRuns, Integer, Hash)>] FilteredCodeCheckRuns data, response status code and response headers
    def filter_code_checks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_code_checks ...'
      end
      # resource path
      local_var_path = '/filter/code_checks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'FilteredCodeCheckRuns'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_code_checks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_code_checks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find commits that match the specified query.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterCommitsRequest] :body 
    # @return [CommitsList]
    def filter_commits(opts = {})
      data, _status_code, _headers = filter_commits_with_http_info(opts)
      data
    end

    # Find commits that match the specified query.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterCommitsRequest] :body 
    # @return [Array<(CommitsList, Integer, Hash)>] CommitsList data, response status code and response headers
    def filter_commits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_commits ...'
      end
      # resource path
      local_var_path = '/filter/commits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CommitsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_commits",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_commits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find developers that made an action within the given timeframe.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterContributorsRequest] :body 
    # @return [Array<DeveloperSummary>]
    def filter_contributors(opts = {})
      data, _status_code, _headers = filter_contributors_with_http_info(opts)
      data
    end

    # Find developers that made an action within the given timeframe.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterContributorsRequest] :body 
    # @return [Array<(Array<DeveloperSummary>, Integer, Hash)>] Array<DeveloperSummary> data, response status code and response headers
    def filter_contributors_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_contributors ...'
      end
      # resource path
      local_var_path = '/filter/contributors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DeveloperSummary>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_contributors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_contributors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the deployments that satisfy the provided filters. We accept new deployment notifications at `/events/deployments`.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterDeploymentsRequest] :body 
    # @return [FilteredDeployments]
    def filter_deployments(opts = {})
      data, _status_code, _headers = filter_deployments_with_http_info(opts)
      data
    end

    # List the deployments that satisfy the provided filters. We accept new deployment notifications at &#x60;/events/deployments&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterDeploymentsRequest] :body 
    # @return [Array<(FilteredDeployments, Integer, Hash)>] FilteredDeployments data, response status code and response headers
    def filter_deployments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_deployments ...'
      end
      # resource path
      local_var_path = '/filter/deployments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'FilteredDeployments'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_deployments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_deployments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the deployment environments.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterEnvironmentsRequest] :body 
    # @return [Array<FilteredEnvironment>]
    def filter_environments(opts = {})
      data, _status_code, _headers = filter_environments_with_http_info(opts)
      data
    end

    # List the deployment environments.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterEnvironmentsRequest] :body 
    # @return [Array<(Array<FilteredEnvironment>, Integer, Hash)>] Array<FilteredEnvironment> data, response status code and response headers
    def filter_environments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_environments ...'
      end
      # resource path
      local_var_path = '/filter/environments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FilteredEnvironment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_environments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_environments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find various JIRA entities relevant to the specified date interval.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterJIRAStuff] :body 
    # @return [FilteredJIRAStuff]
    def filter_jira_stuff(opts = {})
      data, _status_code, _headers = filter_jira_stuff_with_http_info(opts)
      data
    end

    # Find various JIRA entities relevant to the specified date interval.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterJIRAStuff] :body 
    # @return [Array<(FilteredJIRAStuff, Integer, Hash)>] FilteredJIRAStuff data, response status code and response headers
    def filter_jira_stuff_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_jira_stuff ...'
      end
      # resource path
      local_var_path = '/filter/jira'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'FilteredJIRAStuff'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_jira_stuff",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_jira_stuff\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find labels used in the given repositories.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterLabelsRequest] :body 
    # @return [Array<FilteredLabel>]
    def filter_labels(opts = {})
      data, _status_code, _headers = filter_labels_with_http_info(opts)
      data
    end

    # Find labels used in the given repositories.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterLabelsRequest] :body 
    # @return [Array<(Array<FilteredLabel>, Integer, Hash)>] Array<FilteredLabel> data, response status code and response headers
    def filter_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_labels ...'
      end
      # resource path
      local_var_path = '/filter/labels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FilteredLabel>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pull requests that satisfy the query.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterPullRequestsRequest] :filter_pull_requests_request 
    # @return [PullRequestSet]
    def filter_prs(opts = {})
      data, _status_code, _headers = filter_prs_with_http_info(opts)
      data
    end

    # List pull requests that satisfy the query.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterPullRequestsRequest] :filter_pull_requests_request 
    # @return [Array<(PullRequestSet, Integer, Hash)>] PullRequestSet data, response status code and response headers
    def filter_prs_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_prs ...'
      end
      # resource path
      local_var_path = '/filter/pull_requests'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'filter_pull_requests_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'PullRequestSet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_prs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_prs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find releases that were published in the given time fram in the given repositories.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterReleasesRequest] :body 
    # @return [ReleaseSet]
    def filter_releases(opts = {})
      data, _status_code, _headers = filter_releases_with_http_info(opts)
      data
    end

    # Find releases that were published in the given time fram in the given repositories.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterReleasesRequest] :body 
    # @return [Array<(ReleaseSet, Integer, Hash)>] ReleaseSet data, response status code and response headers
    def filter_releases_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_releases ...'
      end
      # resource path
      local_var_path = '/filter/releases'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'ReleaseSet'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_releases",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_releases\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find repositories that were updated within the given timeframe.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterRepositoriesRequest] :body 
    # @return [Array<String>]
    def filter_repositories(opts = {})
      data, _status_code, _headers = filter_repositories_with_http_info(opts)
      data
    end

    # Find repositories that were updated within the given timeframe.
    # @param [Hash] opts the optional parameters
    # @option opts [FilterRepositoriesRequest] :body 
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def filter_repositories_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilterApi.filter_repositories ...'
      end
      # resource path
      local_var_path = '/filter/repositories'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
        header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyAuth', 'bearerAuth']

      new_options = opts.merge(
        :operation => :"FilterApi.filter_repositories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilterApi#filter_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
