=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.86 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.86.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module Athenian
  # Information about a commit.
  class Commit
    attr_accessor :author

    # Hashes of the children. Exists only if `property == everything`. Note: the direction is from HEAD to the root, i.e. reversed compared to Git. 
    attr_accessor :children

    attr_accessor :committer

    # Deployments of the commit.
    attr_accessor :deployments

    # Number of files changed in this PR.
    attr_accessor :files_changed

    # Git commit hash.
    attr_accessor :hash

    # Commit message.
    attr_accessor :message

    # Repository name which uniquely identifies any repository in any service provider. The format matches the repository URL without the protocol part. No \".git\" should be appended. We support a special syntax for repository sets: \"{reposet id}\" adds all the repositories from the given set. 
    attr_accessor :repository

    # Overall number of lines added.
    attr_accessor :size_added

    # Overall number of lines removed.
    attr_accessor :size_removed

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'author' => :'author',
        :'children' => :'children',
        :'committer' => :'committer',
        :'deployments' => :'deployments',
        :'files_changed' => :'files_changed',
        :'hash' => :'hash',
        :'message' => :'message',
        :'repository' => :'repository',
        :'size_added' => :'size_added',
        :'size_removed' => :'size_removed'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'author' => :'CommitSignature',
        :'children' => :'Array<String>',
        :'committer' => :'CommitSignature',
        :'deployments' => :'Array<String>',
        :'files_changed' => :'Integer',
        :'hash' => :'String',
        :'message' => :'String',
        :'repository' => :'String',
        :'size_added' => :'Integer',
        :'size_removed' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, 'The input argument (attributes) must be a hash in `Athenian::Commit` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Athenian::Commit`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'author')
        self.author = attributes[:'author']
      end

      if attributes.key?(:'children')
        if (value = attributes[:'children']).is_a?(Array)
          self.children = value
        end
      end

      if attributes.key?(:'committer')
        self.committer = attributes[:'committer']
      end

      if attributes.key?(:'deployments')
        if (value = attributes[:'deployments']).is_a?(Array)
          self.deployments = value
        end
      end

      if attributes.key?(:'files_changed')
        self.files_changed = attributes[:'files_changed']
      end

      if attributes.key?(:'hash')
        self.hash = attributes[:'hash']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'size_added')
        self.size_added = attributes[:'size_added']
      end

      if attributes.key?(:'size_removed')
        self.size_removed = attributes[:'size_removed']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @author.nil?
        invalid_properties.push('invalid value for "author", author cannot be nil.')
      end

      if @committer.nil?
        invalid_properties.push('invalid value for "committer", committer cannot be nil.')
      end

      if @files_changed.nil?
        invalid_properties.push('invalid value for "files_changed", files_changed cannot be nil.')
      end

      if @files_changed < 0
        invalid_properties.push('invalid value for "files_changed", must be greater than or equal to 0.')
      end

      if @hash.nil?
        invalid_properties.push('invalid value for "hash", hash cannot be nil.')
      end

      if @message.nil?
        invalid_properties.push('invalid value for "message", message cannot be nil.')
      end

      if @repository.nil?
        invalid_properties.push('invalid value for "repository", repository cannot be nil.')
      end

      if @size_added.nil?
        invalid_properties.push('invalid value for "size_added", size_added cannot be nil.')
      end

      if @size_added < 0
        invalid_properties.push('invalid value for "size_added", must be greater than or equal to 0.')
      end

      if @size_removed.nil?
        invalid_properties.push('invalid value for "size_removed", size_removed cannot be nil.')
      end

      if @size_removed < 0
        invalid_properties.push('invalid value for "size_removed", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @author.nil?
      return false if @committer.nil?
      return false if @files_changed.nil?
      return false if @files_changed < 0
      return false if @hash.nil?
      return false if @message.nil?
      return false if @repository.nil?
      return false if @size_added.nil?
      return false if @size_added < 0
      return false if @size_removed.nil?
      return false if @size_removed < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] files_changed Value to be assigned
    def files_changed=(files_changed)
      if files_changed.nil?
        fail ArgumentError, 'files_changed cannot be nil'
      end

      if files_changed < 0
        fail ArgumentError, 'invalid value for "files_changed", must be greater than or equal to 0.'
      end

      @files_changed = files_changed
    end

    # Custom attribute writer method with validation
    # @param [Object] size_added Value to be assigned
    def size_added=(size_added)
      if size_added.nil?
        fail ArgumentError, 'size_added cannot be nil'
      end

      if size_added < 0
        fail ArgumentError, 'invalid value for "size_added", must be greater than or equal to 0.'
      end

      @size_added = size_added
    end

    # Custom attribute writer method with validation
    # @param [Object] size_removed Value to be assigned
    def size_removed=(size_removed)
      if size_removed.nil?
        fail ArgumentError, 'size_removed cannot be nil'
      end

      if size_removed < 0
        fail ArgumentError, 'invalid value for "size_removed", must be greater than or equal to 0.'
      end

      @size_removed = size_removed
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          author == o.author &&
          children == o.children &&
          committer == o.committer &&
          deployments == o.deployments &&
          files_changed == o.files_changed &&
          hash == o.hash &&
          message == o.message &&
          repository == o.repository &&
          size_added == o.size_added &&
          size_removed == o.size_removed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [author, children, committer, deployments, files_changed, hash, message, repository, size_added, size_removed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Athenian.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
