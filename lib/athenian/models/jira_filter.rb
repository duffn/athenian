=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.86 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.86.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module Athenian
  # Filters related to JIRA traits. The aggregation between each filter type is *AND*. 
  class JIRAFilter
    # JIRA issues must be included in the epics from the list.
    attr_accessor :epics

    # Only issues having at least one label from the list will be included Several labels may be concatenated by a comma `,` so that all of them are required. 
    attr_accessor :labels_include

    # Issues having one label from the list will be excluded.
    attr_accessor :labels_exclude

    # Issues must have one of the given types, e.g. Bug, Task, Design Document, etc. 
    attr_accessor :issue_types

    # Issues must have a priority from the given list.
    attr_accessor :priorities

    # Issues must be contained in a project in the given project keys list.
    attr_accessor :projects

    # The JIRA issues must have a status belonging to one of these categories.
    attr_accessor :status_categories

    # Select PRs that are not mapped to any JIRA issue. May not be specified with anything else.
    attr_accessor :unmapped

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'epics' => :'epics',
        :'labels_include' => :'labels_include',
        :'labels_exclude' => :'labels_exclude',
        :'issue_types' => :'issue_types',
        :'priorities' => :'priorities',
        :'projects' => :'projects',
        :'status_categories' => :'status_categories',
        :'unmapped' => :'unmapped'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'epics' => :'Array<String>',
        :'labels_include' => :'Array<String>',
        :'labels_exclude' => :'Array<String>',
        :'issue_types' => :'Array<String>',
        :'priorities' => :'Array<String>',
        :'projects' => :'Array<String>',
        :'status_categories' => :'Array<JIRAStatusCategory>',
        :'unmapped' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, 'The input argument (attributes) must be a hash in `Athenian::JIRAFilter` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Athenian::JIRAFilter`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'epics')
        if (value = attributes[:'epics']).is_a?(Array)
          self.epics = value
        end
      end

      if attributes.key?(:'labels_include')
        if (value = attributes[:'labels_include']).is_a?(Array)
          self.labels_include = value
        end
      end

      if attributes.key?(:'labels_exclude')
        if (value = attributes[:'labels_exclude']).is_a?(Array)
          self.labels_exclude = value
        end
      end

      if attributes.key?(:'issue_types')
        if (value = attributes[:'issue_types']).is_a?(Array)
          self.issue_types = value
        end
      end

      if attributes.key?(:'priorities')
        if (value = attributes[:'priorities']).is_a?(Array)
          self.priorities = value
        end
      end

      if attributes.key?(:'projects')
        if (value = attributes[:'projects']).is_a?(Array)
          self.projects = value
        end
      end

      if attributes.key?(:'status_categories')
        if (value = attributes[:'status_categories']).is_a?(Array)
          self.status_categories = value
        end
      end

      if attributes.key?(:'unmapped')
        self.unmapped = attributes[:'unmapped']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          epics == o.epics &&
          labels_include == o.labels_include &&
          labels_exclude == o.labels_exclude &&
          issue_types == o.issue_types &&
          priorities == o.priorities &&
          projects == o.projects &&
          status_categories == o.status_categories &&
          unmapped == o.unmapped
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [epics, labels_include, labels_exclude, issue_types, priorities, projects, status_categories, unmapped].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Athenian.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
