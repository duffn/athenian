=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.85 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.85.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.5.0
=end

require 'date'
require 'time'

module Athenian
  # Various developer contributions statistics over the specified time period. Note: any of these properties may be missing if there was no such activity.
  class DeveloperUpdates
    # How many PRs authored by this developer updated. Note: this is not the same as the number of PRs this developer opened. Note: the update origin is not necessarily this developer.
    attr_accessor :prs

    # How many reviews this developer submitted. Note: this is not the same as the number of unique PRs reviewed.
    attr_accessor :reviewer

    # How many commits this developer authored.
    attr_accessor :commit_author

    # How many commits this developer pushed.
    attr_accessor :commit_committer

    # How many regular PR comments this developer left. Note: issues are not taken into account, only the PRs.
    attr_accessor :commenter

    # How many releases this developer created.
    attr_accessor :releaser

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'prs' => :'prs',
        :'reviewer' => :'reviewer',
        :'commit_author' => :'commit_author',
        :'commit_committer' => :'commit_committer',
        :'commenter' => :'commenter',
        :'releaser' => :'releaser'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'prs' => :'Integer',
        :'reviewer' => :'Integer',
        :'commit_author' => :'Integer',
        :'commit_committer' => :'Integer',
        :'commenter' => :'Integer',
        :'releaser' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, 'The input argument (attributes) must be a hash in `Athenian::DeveloperUpdates` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Athenian::DeveloperUpdates`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'prs')
        self.prs = attributes[:'prs']
      end

      if attributes.key?(:'reviewer')
        self.reviewer = attributes[:'reviewer']
      end

      if attributes.key?(:'commit_author')
        self.commit_author = attributes[:'commit_author']
      end

      if attributes.key?(:'commit_committer')
        self.commit_committer = attributes[:'commit_committer']
      end

      if attributes.key?(:'commenter')
        self.commenter = attributes[:'commenter']
      end

      if attributes.key?(:'releaser')
        self.releaser = attributes[:'releaser']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@prs.nil? && @prs < 0
        invalid_properties.push('invalid value for "prs", must be greater than or equal to 0.')
      end

      if !@reviewer.nil? && @reviewer < 0
        invalid_properties.push('invalid value for "reviewer", must be greater than or equal to 0.')
      end

      if !@commit_author.nil? && @commit_author < 0
        invalid_properties.push('invalid value for "commit_author", must be greater than or equal to 0.')
      end

      if !@commit_committer.nil? && @commit_committer < 0
        invalid_properties.push('invalid value for "commit_committer", must be greater than or equal to 0.')
      end

      if !@commenter.nil? && @commenter < 0
        invalid_properties.push('invalid value for "commenter", must be greater than or equal to 0.')
      end

      if !@releaser.nil? && @releaser < 0
        invalid_properties.push('invalid value for "releaser", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@prs.nil? && @prs < 0
      return false if !@reviewer.nil? && @reviewer < 0
      return false if !@commit_author.nil? && @commit_author < 0
      return false if !@commit_committer.nil? && @commit_committer < 0
      return false if !@commenter.nil? && @commenter < 0
      return false if !@releaser.nil? && @releaser < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] prs Value to be assigned
    def prs=(prs)
      if !prs.nil? && prs < 0
        fail ArgumentError, 'invalid value for "prs", must be greater than or equal to 0.'
      end

      @prs = prs
    end

    # Custom attribute writer method with validation
    # @param [Object] reviewer Value to be assigned
    def reviewer=(reviewer)
      if !reviewer.nil? && reviewer < 0
        fail ArgumentError, 'invalid value for "reviewer", must be greater than or equal to 0.'
      end

      @reviewer = reviewer
    end

    # Custom attribute writer method with validation
    # @param [Object] commit_author Value to be assigned
    def commit_author=(commit_author)
      if !commit_author.nil? && commit_author < 0
        fail ArgumentError, 'invalid value for "commit_author", must be greater than or equal to 0.'
      end

      @commit_author = commit_author
    end

    # Custom attribute writer method with validation
    # @param [Object] commit_committer Value to be assigned
    def commit_committer=(commit_committer)
      if !commit_committer.nil? && commit_committer < 0
        fail ArgumentError, 'invalid value for "commit_committer", must be greater than or equal to 0.'
      end

      @commit_committer = commit_committer
    end

    # Custom attribute writer method with validation
    # @param [Object] commenter Value to be assigned
    def commenter=(commenter)
      if !commenter.nil? && commenter < 0
        fail ArgumentError, 'invalid value for "commenter", must be greater than or equal to 0.'
      end

      @commenter = commenter
    end

    # Custom attribute writer method with validation
    # @param [Object] releaser Value to be assigned
    def releaser=(releaser)
      if !releaser.nil? && releaser < 0
        fail ArgumentError, 'invalid value for "releaser", must be greater than or equal to 0.'
      end

      @releaser = releaser
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          prs == o.prs &&
          reviewer == o.reviewer &&
          commit_author == o.commit_author &&
          commit_committer == o.commit_committer &&
          commenter == o.commenter &&
          releaser == o.releaser
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [prs, reviewer, commit_author, commit_committer, commenter, releaser].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Athenian.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
