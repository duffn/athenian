=begin
This is an automatically generated file. DO NOT EDIT.

Generated from version 2.1.81 of the OpenAPI specification at
https://github.com/athenianco/api-spec/releases/tag/2.1.81.
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.4.0
=end

require 'date'
require 'time'

module Athenian
  # Various information about a repository release.
  class FilteredRelease
    # Cumulative number of lines inserted since the previous release.
    attr_accessor :added_lines

    # Time since the previous release /\\d+s/.
    attr_accessor :age

    # Number of commits since the previous release.
    attr_accessor :commits

    # List of released commit authors' logins.
    attr_accessor :commit_authors

    # Cumulative number of lines removed since the previous release.
    attr_accessor :deleted_lines

    # Deployments with this release.
    attr_accessor :deployments

    # Title of the release.
    attr_accessor :name

    # List of released pull requests.
    attr_accessor :prs

    # When the release was created.
    attr_accessor :published

    # Login of the person who created the release.
    attr_accessor :publisher

    # Name of the repository where the release exists.
    attr_accessor :repository

    # Release commit hash.
    attr_accessor :sha

    # Link to the release.
    attr_accessor :url

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'added_lines' => :'added_lines',
        :'age' => :'age',
        :'commits' => :'commits',
        :'commit_authors' => :'commit_authors',
        :'deleted_lines' => :'deleted_lines',
        :'deployments' => :'deployments',
        :'name' => :'name',
        :'prs' => :'prs',
        :'published' => :'published',
        :'publisher' => :'publisher',
        :'repository' => :'repository',
        :'sha' => :'sha',
        :'url' => :'url'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'added_lines' => :'Integer',
        :'age' => :'String',
        :'commits' => :'Integer',
        :'commit_authors' => :'Array<String>',
        :'deleted_lines' => :'Integer',
        :'deployments' => :'Array<String>',
        :'name' => :'String',
        :'prs' => :'Array<ReleasedPullRequest>',
        :'published' => :'Time',
        :'publisher' => :'String',
        :'repository' => :'String',
        :'sha' => :'String',
        :'url' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'publisher',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, 'The input argument (attributes) must be a hash in `Athenian::FilteredRelease` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Athenian::FilteredRelease`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'added_lines')
        self.added_lines = attributes[:'added_lines']
      end

      if attributes.key?(:'age')
        self.age = attributes[:'age']
      end

      if attributes.key?(:'commits')
        self.commits = attributes[:'commits']
      end

      if attributes.key?(:'commit_authors')
        if (value = attributes[:'commit_authors']).is_a?(Array)
          self.commit_authors = value
        end
      end

      if attributes.key?(:'deleted_lines')
        self.deleted_lines = attributes[:'deleted_lines']
      end

      if attributes.key?(:'deployments')
        if (value = attributes[:'deployments']).is_a?(Array)
          self.deployments = value
        end
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'prs')
        if (value = attributes[:'prs']).is_a?(Array)
          self.prs = value
        end
      end

      if attributes.key?(:'published')
        self.published = attributes[:'published']
      end

      if attributes.key?(:'publisher')
        self.publisher = attributes[:'publisher']
      end

      if attributes.key?(:'repository')
        self.repository = attributes[:'repository']
      end

      if attributes.key?(:'sha')
        self.sha = attributes[:'sha']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @added_lines.nil?
        invalid_properties.push('invalid value for "added_lines", added_lines cannot be nil.')
      end

      if @added_lines < 0
        invalid_properties.push('invalid value for "added_lines", must be greater than or equal to 0.')
      end

      if @age.nil?
        invalid_properties.push('invalid value for "age", age cannot be nil.')
      end

      if @commits.nil?
        invalid_properties.push('invalid value for "commits", commits cannot be nil.')
      end

      if @commits < 0
        invalid_properties.push('invalid value for "commits", must be greater than or equal to 0.')
      end

      if @commit_authors.nil?
        invalid_properties.push('invalid value for "commit_authors", commit_authors cannot be nil.')
      end

      if @deleted_lines.nil?
        invalid_properties.push('invalid value for "deleted_lines", deleted_lines cannot be nil.')
      end

      if @deleted_lines < 0
        invalid_properties.push('invalid value for "deleted_lines", must be greater than or equal to 0.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @prs.nil?
        invalid_properties.push('invalid value for "prs", prs cannot be nil.')
      end

      if @published.nil?
        invalid_properties.push('invalid value for "published", published cannot be nil.')
      end

      if @repository.nil?
        invalid_properties.push('invalid value for "repository", repository cannot be nil.')
      end

      if @sha.nil?
        invalid_properties.push('invalid value for "sha", sha cannot be nil.')
      end

      if @sha.to_s.length > 40
        invalid_properties.push('invalid value for "sha", the character length must be smaller than or equal to 40.')
      end

      if @sha.to_s.length < 40
        invalid_properties.push('invalid value for "sha", the character length must be great than or equal to 40.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @added_lines.nil?
      return false if @added_lines < 0
      return false if @age.nil?
      return false if @commits.nil?
      return false if @commits < 0
      return false if @commit_authors.nil?
      return false if @deleted_lines.nil?
      return false if @deleted_lines < 0
      return false if @name.nil?
      return false if @prs.nil?
      return false if @published.nil?
      return false if @repository.nil?
      return false if @sha.nil?
      return false if @sha.to_s.length > 40
      return false if @sha.to_s.length < 40
      return false if @url.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] added_lines Value to be assigned
    def added_lines=(added_lines)
      if added_lines.nil?
        fail ArgumentError, 'added_lines cannot be nil'
      end

      if added_lines < 0
        fail ArgumentError, 'invalid value for "added_lines", must be greater than or equal to 0.'
      end

      @added_lines = added_lines
    end

    # Custom attribute writer method with validation
    # @param [Object] commits Value to be assigned
    def commits=(commits)
      if commits.nil?
        fail ArgumentError, 'commits cannot be nil'
      end

      if commits < 0
        fail ArgumentError, 'invalid value for "commits", must be greater than or equal to 0.'
      end

      @commits = commits
    end

    # Custom attribute writer method with validation
    # @param [Object] deleted_lines Value to be assigned
    def deleted_lines=(deleted_lines)
      if deleted_lines.nil?
        fail ArgumentError, 'deleted_lines cannot be nil'
      end

      if deleted_lines < 0
        fail ArgumentError, 'invalid value for "deleted_lines", must be greater than or equal to 0.'
      end

      @deleted_lines = deleted_lines
    end

    # Custom attribute writer method with validation
    # @param [Object] sha Value to be assigned
    def sha=(sha)
      if sha.nil?
        fail ArgumentError, 'sha cannot be nil'
      end

      if sha.to_s.length > 40
        fail ArgumentError, 'invalid value for "sha", the character length must be smaller than or equal to 40.'
      end

      if sha.to_s.length < 40
        fail ArgumentError, 'invalid value for "sha", the character length must be great than or equal to 40.'
      end

      @sha = sha
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          added_lines == o.added_lines &&
          age == o.age &&
          commits == o.commits &&
          commit_authors == o.commit_authors &&
          deleted_lines == o.deleted_lines &&
          deployments == o.deployments &&
          name == o.name &&
          prs == o.prs &&
          published == o.published &&
          publisher == o.publisher &&
          repository == o.repository &&
          sha == o.sha &&
          url == o.url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [added_lines, age, commits, commit_authors, deleted_lines, deployments, name, prs, published, publisher, repository, sha, url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Athenian.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
